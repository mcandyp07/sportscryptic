<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sporting Cryptic - Daily Puzzle</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 min-h-screen flex items-center justify-center p-4">
    <div class="max-w-md w-full bg-white rounded-xl shadow-lg p-6 space-y-6">
        <h1 class="text-3xl font-bold text-center text-gray-800">Today's Sporting Cryptic Puzzle</h1>
        <p id="clue" class="text-xl text-center text-gray-600">Loading clue...</p>
        <div id="answer-boxes" class="flex justify-center space-x-2"></div>
        <div class="flex space-x-4 justify-center">
            <button id="submit" class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition">Submit</button>
            <button id="hint" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition">Get Hint</button>
        </div>
        <div id="keyboard" class="grid grid-cols-10 gap-1 mt-4"></div>
    </div>

    <script>
        const keyboard = document.getElementById('keyboard');
        const answerBoxes = document.getElementById('answer-boxes');
        const submitButton = document.getElementById('submit');
        const hintButton = document.getElementById('hint');
        const clueElement = document.getElementById('clue');

        let answerLength = 0;
        let currentPosition = 0;

        function addKey(text, classes = [], span = 1) {
            const button = document.createElement('button');
            button.textContent = text;
            button.classList.add('p-2', 'bg-gray-200', 'rounded', 'hover:bg-gray-300', 'transition', ...classes);
            if (span > 1) {
                button.style.gridColumn = `span ${span}`;
            }
            button.addEventListener('click', () => {
                if (currentPosition < answerLength) {
                    answerBoxes.children[currentPosition].textContent = text === 'Space' ? ' ' : text;
                    currentPosition++;
                }
            });
            keyboard.appendChild(button);
        }

        // Add letter keys
        'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('').forEach(key => addKey(key));

        // Add space bar
        addKey('Space', ['col-span-4']);

        // Add delete key
        addKey('Delete', ['col-span-2']);
        keyboard.lastElementChild.addEventListener('click', () => {
            if (currentPosition > 0) {
                currentPosition--;
                answerBoxes.children[currentPosition].textContent = '';
            }
        });

        // Fetch and display the clue
        fetch('/_clues/YYYY-MM-DD.json') // Replace YYYY-MM-DD with actual date or logic to get current date
            .then(response => response.json())
            .then(data => {
                clueElement.textContent = data.clue;
                answerLength = data.answerLength;
                
                // Create answer boxes
                for (let i = 0; i < answerLength; i++) {
                    const box = document.createElement('div');
                    box.classList.add('w-8', 'h-8', 'border-2', 'border-gray-300', 'rounded', 'flex', 'items-center', 'justify-center', 'text-xl', 'font-bold', 'uppercase');
                    answerBoxes.appendChild(box);
                }
            })
            .catch(error => {
                console.error('Error fetching clue:', error);
                clueElement.textContent = 'Error loading clue. Please try again later.';
            });

        submitButton.addEventListener('click', () => {
            const submittedAnswer = Array.from(answerBoxes.children)
                .map(box => box.textContent)
                .join('');
            console.log('Submitted answer:', submittedAnswer);
            // Implement answer checking logic here
        });

        hintButton.addEventListener('click', () => {
            console.log('Hint requested');
            // Implement hint logic here
        });
    </script>
</body>
</html>
